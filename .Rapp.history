save_sticker("/Users/jansteinfeld/CloudStation/Hexsticker/PTA_Sticker.pdf")
# LICRE erstellen#
##########################
p_size=10; s_x=0.05; s_y=.075; h_size=2; h_fill="#fbb900"; h_color="#b58501"; s_width=0.75;package="Limesurvey-Creation [licre]"#
p_x=1; p_y=1.4;p_color="#FFFFFF"; p_family="serif"#
#
url = "https:\\\\psychometrie.bmb.gv.at";  u_x=1; u_y=0.08; u_color="black"; u_family="Aller_Rg"; u_size=3.5 #
#
d <- data.frame(x=1, y=.80, image="\\\\sv2profilew7\\folder\\steinfeldj\\Desktop\\limes.png")#
#
hex <- hexagon(size=h_size, fill=h_fill, color=h_color) #
sticker <- hex + geom_image(aes_(x=~x, y=~y, image=~image), d, size=s_width) #
sticker <- sticker + geom_pkgname(package, p_x, p_y, p_color, p_family, p_size)#
#
sticker <- sticker + geom_url(url, x=u_x, y = u_y, color = u_color, family = u_family, size=u_size) #
pp <- sticker +  theme(#
  rect = element_rect(fill = "transparent") # bg of the panel#
)#
pp#
save_sticker("licre_Sticker.png")#
# LICRE erstellen#
##########################
p_size=10; s_x=0.05; s_y=.075; h_size=2; h_fill="#fbb900"; h_color="#b58501"; s_width=0.75;package="Limesurvey-Creation [licre]"#
p_x=1; p_y=1.4;p_color="#FFFFFF"; p_family="serif"#
#
url = "https:\\\\psychometrie.bmb.gv.at";  u_x=1; u_y=0.08; u_color="black"; u_family="Aller_Rg"; u_size=3.5 #
#
d <- data.frame(x=1, y=.80, image="/Users/jansteinfeld/CloudStation/Hexsticker/imes.png")#
#
hex <- hexagon(size=h_size, fill=h_fill, color=h_color) #
sticker <- hex + geom_image(aes_(x=~x, y=~y, image=~image), d, size=s_width) #
sticker <- sticker + geom_pkgname(package, p_x, p_y, p_color, p_family, p_size)#
#
sticker <- sticker + geom_url(url, x=u_x, y = u_y, color = u_color, family = u_family, size=u_size) #
pp <- sticker +  theme(#
  rect = element_rect(fill = "transparent") # bg of the panel#
)#
pp#
save_sticker("/Users/jansteinfeld/CloudStation/Hexsticker/licre_Sticker.pdf")#
# SRDP erstellen#
##########################
p_size=15; s_x=0.05; s_y=.075; h_size=2; h_fill="#b9c1cd"; h_color="#506482"; s_width=0.85;package="Feldtestungen [srdp]"#
p_x=1; p_y=1.4;p_color="#FFFFFF"; p_family="serif"#
#
url = "https:\\\\psychometrie.bmb.gv.at";  u_x=1; u_y=0.08; u_color="black"; u_family="Aller_Rg"; u_size=3.5 #
#
d <- data.frame(x=1, y=.80, image="/Users/jansteinfeld/CloudStation/Hexsticker/SRDP-Logo.png")#
#
hex <- hexagon(size=h_size, fill=h_fill, color=h_color) #
sticker <- hex + geom_image(aes_(x=~x, y=~y, image=~image), d, size=s_width) #
sticker <- sticker + geom_pkgname(package, p_x, p_y, p_color, p_family, p_size)#
#
sticker <- sticker + geom_url(url, x=u_x, y = u_y, color = u_color, family = u_family, size=u_size) #
pp <- sticker +  theme(#
  rect = element_rect(fill = "transparent") # bg of the panel#
)#
pp#
save_sticker("/Users/jansteinfeld/CloudStation/Hexsticker/srdp_Sticker.pdf")
# LICRE erstellen#
##########################
p_size=10; s_x=0.05; s_y=.075; h_size=2; h_fill="#fbb900"; h_color="#b58501"; s_width=0.75;package="Limesurvey-Creation [licre]"#
p_x=1; p_y=1.4;p_color="#FFFFFF"; p_family="serif"#
#
url = "https:\\\\psychometrie.bmb.gv.at";  u_x=1; u_y=0.08; u_color="black"; u_family="Aller_Rg"; u_size=3.5 #
#
d <- data.frame(x=1, y=.80, image="/Users/jansteinfeld/CloudStation/Hexsticker/limes.png")#
#
hex <- hexagon(size=h_size, fill=h_fill, color=h_color) #
sticker <- hex + geom_image(aes_(x=~x, y=~y, image=~image), d, size=s_width) #
sticker <- sticker + geom_pkgname(package, p_x, p_y, p_color, p_family, p_size)#
#
sticker <- sticker + geom_url(url, x=u_x, y = u_y, color = u_color, family = u_family, size=u_size) #
pp <- sticker +  theme(#
  rect = element_rect(fill = "transparent") # bg of the panel#
)#
pp#
save_sticker("/Users/jansteinfeld/CloudStation/Hexsticker/licre_Sticker.pdf")
library(PP)
vignette()
vignette("ppass_par_and_fit")
vignette("intro_pfit")
library(PP)
?PPall
reg <- ""^(\\s*\\d+=[^;=]+;){1,}\\s*\\d+=[^;=]+$"
reg <- "^(\\s*\\d+=[^;=]+;){1,}\\s*\\d+=[^;=]+$"
test  <- "das1234asldkj"
grep(reg,test)
?PP
library(PP)
?PP
vignette("PP_pfit")
vignette()
m <- 3; rmax <- 7; rcum <- c(3,5,7)#
eps_position <- c(0,2,4)#
eps <- c(2,1,2,1,2,1)#
maxSolved <- c(3, 3, 3)#
gamma0 <- rep(0, m * rmax)#
minSolved <- c(0, 2, 0)#
maxSolved <- c(2, 2, 2)#
gamma0[1:rcum[1]] <- c(1,eps[1:eps_position[2]])#
# Hier muss nun dafür gesorgt werden, dass die jeweiligen epsi eingetragen werden, die in jedem Block die minimale LH bilden#
for (b in 1:m) {#
  rmax_s = rmax * (b - 1) + 1 #+ sum(minSolved[1:b])#
  rmax_b = b*rmax#
  for (k in rmax_s:rmax_b) {#
    if ((k < rcum[1]) & minSolved[1] != 0) {#
      gamma0[k] = 0#
    } else if ((k %% rmax) == 1) {#
      if (sum(minSolved) != 0) {#
        gamma0[k + sum(minSolved[1:b])] = prod(eps[eps_position[minSolved > 0] + minSolved[minSolved > 0]])#
      } else {#
        gamma0[k] = 1.0#
      }#
    }#
  }#
}#
gamma0
eps <- c(2,1,2,1,2,1)#
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(2, 2, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0#
gamma0[(1 + 2*rmax):length(gamma0)]
rcum
m <- 3; rmax <- 7; rcum <- c(3,5,7)#
eps_position <- c(0,2,4)#
eps <- c(2,1,2,1,2,1)#
maxSolved <- c(3, 3, 3)#
gamma0 <- rep(0, m * rmax)#
minSolved <- c(0, 2, 0)#
maxSolved <- c(2, 2, 2)#
gamma0[1:rcum[1]] <- c(1,eps[1:eps_position[2]])#
# Hier muss nun dafür gesorgt werden, dass die jeweiligen epsi eingetragen werden, die in jedem Block die minimale LH bilden#
for (b in 1:m) {#
  rmax_s = rmax * (b - 1) + 1 #+ sum(minSolved[1:b])#
  rmax_b = b*rmax#
  for (k in rmax_s:rmax_b) {#
    if ((k < rcum[1]) & minSolved[1] != 0) {#
      gamma0[k] = 0#
    } else if ((k %% rmax) == 1) {#
      if (sum(minSolved) != 0) {#
        gamma0[k + sum(minSolved[1:b])] = prod(eps[eps_position[minSolved > 0] + minSolved[minSolved > 0]])#
      } else {#
        gamma0[k] = 1.0#
      }#
    }#
  }#
}#
gamma0
eps <- c(2,1,2,1,2,1)#
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(2, 2, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0#
gamma0[(1 + 2*rmax):length(gamma0)]
gamma0 <- rep(0,m*rmax); gamma0[c(10,17)] <- 1; gamma0[3] <- c(1); minSolved <- c(2, 0, 0); gamma0#
gamma0 <- rep(0,m*rmax); gamma0[c(10,17)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 2, 0); gamma0#
gamma0 <- rep(0,m*rmax); gamma0[c(8,17)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 2); gamma0#
gamma0 <- rep(0,m*rmax); gamma0[c(10,19)] <- 1; minSolved <- c(0, 2, 2); gamma0[1:3] <- c(1,2,1); gamma0#
gamma0 <- rep(0,m*rmax); gamma0[c( 9,18)] <- 2; minSolved <- c(0, 1, 2); gamma0[1:3] <- c(1,2,1); gamma0
gamma0 <- rep(0,m*rmax); gamma0[c(10,17)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 2, 0); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0#
gamma0[(1 + 2*rmax):length(gamma0)]
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(1, 2, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(2, 1, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(2, 2, 1); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:3] <- c(1,2,1); minSolved <- c(0, 0, 0); maxSolved <- c(1, 2, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0
gamma0 <- rep(0,m*rmax); gamma0[c(8,15)] <- 1; gamma0[1:2] <- c(1,2); minSolved <- c(0, 0, 0); maxSolved <- c(1, 2, 2); gamma0
output <- TRUE#
for (i in 2:m) {#
  if (output) cat(rep(1:7,3),"\n")#
  if (output) cat(gamma0,"\n")#
  if (output) cat("i:",i," ")#
  ncol = (i - 1) * rmax#
  ocol = (i - 2) * rmax#
  if (output) cat("\nncol:",ncol)#
  if (output) cat("\nocol:",ocol,"\n")#
  for (r in 2:rcum[i]) {#
    if (output) cat("r:",r," ")#
      if (minSolved[i] == 0) {#
        if (output) cat("70:gamma0[r + ncol] = gamma0[r + ocol]:",gamma0[r + ncol] ,"=", gamma0[r + ocol],"\n")#
        gamma0[r + ncol] = gamma0[r + ocol]#
      }#
      for (k in 1:(min(maxSolved[i], r - 1))) {#
        if (output) cat("k:",k," ")#
        if (((r - (k + 1) + ocol) <= 0) & max(minSolved) == 0 ) {#
          if (output) cat("76:gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]:",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", eps[eps_position[i] + k],"\n")#
          gamma0[r + ncol] = gamma0[r + ncol] + eps[eps_position[i] + k]#
        } else {#
          if (minSolved[i] == 0) {#
            if (output) cat("80:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol ] * eps[eps_position[i] + k];",gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
            gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
            } else if (r > sum(minSolved[2:i]) + 1) {#
              if (k < minSolved[i]) {#
              if (output) cat("84:gamma0[r + ncol] = gamma0[r + ncol]", gamma0[r + ncol] ,"=", gamma0[r + ncol],"\n")#
              gamma0[r + ncol] = gamma0[r + ncol]#
              } else {#
                if (output) cat("87:gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]", gamma0[r + ncol] ,"=", gamma0[r + ncol] ,"+", gamma0[r - (k) + ocol] ,"*", eps[eps_position[i] + k],"\n")#
                gamma0[r + ncol] = gamma0[r + ncol] + gamma0[r - (k) + ocol] * eps[eps_position[i] + k]#
                }#
             }#
          }#
      }#
  }#
}#
#
gamma0
updateR()
install.packages("updateR")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'neede')
find.package()
?updateR
library(updateR)
?updateR
updateR(admin_password = 'neede')
updateR(admin_password = 'need')
library(sirt)
library(immer)
find.packages()
finde.packages()
find.package()
list.files("/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
diese <- list.files("/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(diese,dependencies=TRUE)
install.packages("pdftools")
pdf_text("~/CloudStation/__PAPA/Hasslbrook/Unterlagen/Finanzen/Lütten_Lieferscheine_aufbereitet_beschnitten_geschwärzt_geschwärzt_geschwärzt.pdf")
pdftools::pdf_text("~/CloudStation/__PAPA/Hasslbrook/Unterlagen/Finanzen/Lütten_Lieferscheine_aufbereitet_beschnitten_geschwärzt_geschwärzt_geschwärzt.pdf")
daten <- pdftools::pdf_text("~/CloudStation/__PAPA/Hasslbrook/Unterlagen/Finanzen/Lütten_Lieferscheine_aufbereitet_beschnitten_geschwärzt_geschwärzt_geschwärzt.pdf")
head(daten)
text2 <- strsplit(daten, "\n")
text2
text2[[1]]
text2[[1]][[1]]
strsplit(text2[[1]][[1]],"\t")
strsplit(text2[[1]][[1]],"\\t")
strsplit(text2[[1]][[1]],"\\s")
install.packages("dexterMST")
db = create_mst_project(":memory:")
library(dexterMST)
db = create_mst_project(":memory:")
db
add_scoring_rules_mst(db, scoring_rules)
routing_rules = mst_rules(#
  easy = Mod_1[0:5] --+ Mod_2, #
  hard = Mod_1[6:10] --+ Mod_3)
create_mst_test(db,#
                test_design = design,#
                routing_rules = routing_rules,#
                test_id = 'ZwitserMaris')
add_booklet_mst(db, bk1, test_id = 'ZwitserMaris', booklet_id = 'easy')
?fit_enorm_mst
routing_rules
fit_enorm_mst
library(dexterMST)#
library(dplyr)#
# start a project#
db = create_mst_project(":memory:")#
#
# define dummy item scoring rules (i.e. response==score)#
scoring_rules = data.frame(item_id = rep(sprintf("item%02.0f",1:50), each=2),#
                            response = rep(0:1,times=50),#
                            item_score = rep(0:1,times=50))#
#
add_scoring_rules_mst(db, scoring_rules)#
#
# define routing rules#
routing_rules = mst_rules(#
  easy = Mod_1[0:5] --+ Mod_2, #
  hard = Mod_1[6:10] --+ Mod_3)#
#
# define a module design (i.e., specifify which items belong to which modules)#
design = data.frame(module_id = rep(c('Mod_2','Mod_1','Mod_3'), times=c(20,10,20)),#
                   item_id = paste0("item",sprintf("%02.0f",1:50)),#
                   item_position = c(1:20,1:10,1:20))#
#
# create/define an mst test#
create_mst_test(db,#
                test_design = design,#
                routing_rules = routing_rules,#
                test_id = 'ZwitserMaris')
sim_RM = function(theta,delta)#
{#
  nP=length(theta)#
  dat=matrix(0,nP,length(delta))#
  for (i in 1:length(delta)) dat[,i]=1*(rlogis(nP,0,1)<=(theta-delta[i]))#
  return(dat)#
}#
a = rep(1,50)#
delta = c(runif(20,-2.3,0),runif(10,-0.6,2),runif(20,1.2,2.4)) # M2, M1, M3#
b=exp(-delta)#
c = rep(0,50)#
nP = 10000#
# simulate theta from a mixture of two normals#
grp = sample(2, nP, replace = TRUE, prob = c(.6,.4))#
theta = rnorm(nP, mean = c(0,1)[grp], sd = c(1.5,0.5)[grp])#
#
data = data.frame(sim_RM(theta, delta))#
colnames(data) = sprintf("item%02.0f",1:50)#
#
# add person id to the data#
data$person_id = 1:nrow(data)#
#
# extract two booklets from the complete data, based on the sum score on the first module#
bk1 = data[rowSums(data[,21:30])<=5,] %>% select(person_id, item01:item30)#
bk2 = data[rowSums(data[,21:30])>5,] %>% select(person_id, item21:item30, item31:item50)#
#
# add response data to the project#
add_booklet_mst(db, bk1, test_id = 'ZwitserMaris', booklet_id = 'easy')#
add_booklet_mst(db, bk2, test_id = 'ZwitserMaris', booklet_id = 'hard')#
# IRT, extended nominal response model#
f = fit_enorm_mst(db)#
#
head(f)#
item_id	item_score	delta	beta	se_b#
item01	1	-1.9458047	-2.5723980	0.0385977#
item02	1	0.1697511	-0.4568422	0.0298956#
item03	1	-1.9278217	-2.5544150	0.0384445#
item04	1	0.2018686	-0.4247248	0.0298913#
item05	1	0.1164153	-0.5101780	0.0299112#
item06	1	-2.0222084	-2.6488017	0.0392681#
# ability estimates per person#
rsp_data = get_responses_mst(db)#
abl = ability(rsp_data, parms = f)#
head(abl)
db
fit_enorm_mst(db)
coef(9)
coef()
fit_enorm_mst
db
data
head(data)
fit_enorm_mst(db)
?fit_enorm_mst()
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
read.csv2("~/CloudStation/Publikation_Präsentation_Poster/Präsentation/2018-09_DGPS/Analysen/Daten/dgps_mldif_ma_matura__2018-09-15_1600__PROC2.csv")
daten <- read.csv2("~/CloudStation/Publikation_Präsentation_Poster/Präsentation/2018-09_DGPS/Analysen/Daten/dgps_mldif_ma_matura__2018-09-15_1600__PROC2.csv")
head(daten)
nrow(daten)
length(unique(daten$skz))
length(unique(paste0(daten$skz,daten$klasse))
)
library(Rcpp)
evalCpp( "1+1")
Error in sourceCpp(code = code, env = env, rebuild = rebuild, cacheDir = cacheDir,  : #
  Error 1 occurred building shared library.
evalCpp("1+1",showOutput=1,rebuild=1)
sessionInfo()
install.packages(c('Rcpp', 'RcppArmadillo'))
evalCpp("1+1",showOutput=1,rebuild=1)
Rcpp::evalCpp("1+1",showOutput=1,rebuild=1)
install.packages("RcppArmadillo", type = "source")
Sys.getenv("PATH")
Sys.getenv(".Renviron")
Sys.getenv()
Rcpp::evalCpp("1+1")
devtools::has_devel()
Rcpp::evalCpp("1+1")
install.packages("RcppArmadillo", type = "source")
install.packages("eRm")
library(eRm)
sim.rasch(1,1)
install.packages("Rcpp")
library(Rcpp)
evalCpp("1+1")
.libPaths()
R.home()
library(dexterMST)#
library(dplyr)
# start a project#
db = create_mst_project(":memory:")#
#
# define dummy item scoring rules (i.e. response==score)#
scoring_rules = data.frame(item_id = rep(sprintf("item%02.0f",1:50), each=2),#
                            response = rep(0:1,times=50),#
                            item_score = rep(0:1,times=50))#
#
add_scoring_rules_mst(db, scoring_rules)#
#
# define routing rules#
routing_rules = mst_rules(#
  easy = Mod_1[0:5] --+ Mod_2, #
  hard = Mod_1[6:10] --+ Mod_3)#
#
# define a module design (i.e., specifify which items belong to which modules)#
design = data.frame(module_id = rep(c('Mod_2','Mod_1','Mod_3'), times=c(20,10,20)),#
                   item_id = paste0("item",sprintf("%02.0f",1:50)),#
                   item_position = c(1:20,1:10,1:20))#
#
# create/define an mst test#
create_mst_test(db,#
                test_design = design,#
                routing_rules = routing_rules,#
                test_id = 'ZwitserMaris')
design_plot(db)
sim_RM = function(theta,delta)#
{#
  nP=length(theta)#
  dat=matrix(0,nP,length(delta))#
  for (i in 1:length(delta)) dat[,i]=1*(rlogis(nP,0,1)<=(theta-delta[i]))#
  return(dat)#
}#
a = rep(1,50)#
delta = c(runif(20,-2.3,0),runif(10,-0.6,2),runif(20,1.2,2.4)) # M2, M1, M3#
b=exp(-delta)#
c = rep(0,50)#
nP = 10000#
# simulate theta from a mixture of two normals#
grp = sample(2, nP, replace = TRUE, prob = c(.6,.4))#
theta = rnorm(nP, mean = c(0,1)[grp], sd = c(1.5,0.5)[grp])#
#
data = data.frame(sim_RM(theta, delta))#
colnames(data) = sprintf("item%02.0f",1:50)#
#
# add person id to the data#
data$person_id = 1:nrow(data)#
#
# extract two booklets from the complete data, based on the sum score on the first module#
bk1 = data[rowSums(data[,21:30])<=5,] %>% select(person_id, item01:item30)#
bk2 = data[rowSums(data[,21:30])>5,] %>% select(person_id, item21:item30, item31:item50)#
#
# add response data to the project#
add_booklet_mst(db, bk1, test_id = 'ZwitserMaris', booklet_id = 'easy')#
add_booklet_mst(db, bk2, test_id = 'ZwitserMaris', booklet_id = 'hard')
f = fit_enorm_mst(db)
r
head(f)
db
fit_enorm_mst
fit_enorm_mst_
dexterMST::fit_enorm_mst_
dexterMST:::fit_enorm_mst_
predicate = NULL
mst_inputs = get_mst_data(db, qtpredicate, env)
mst_inputs = dexterMST::get_mst_data(db, qtpredicate, env)
mst_inputs = dexterMST:::get_mst_data(db, qtpredicate, env)
mst_inputs = dexterMST:::get_mst_data(db, qtpredicate)
env = caller_env()
env = dexterMST:::caller_env()
env = dexterMST::caller_env()
environment
environment()
env <- environment()
mst_inputs = dexterMST:::get_mst_data(db, qtpredicate)
qtpredicate = eval(substitute(quote(predicate)))
mst_inputs = dexterMST:::get_mst_data(db, qtpredicate)
mst_inputs
im = as.matrix(table(mst_inputs$booklet_design$item_id, paste(mst_inputs$booklet_design$test_id, #
        mst_inputs$booklet_design$booklet_id, sep = ".")))
im
data
str(g)
str(f)
head(data)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(fit_enorm_mst(db),tmtCML::raschmodel(data))
head(data)
microbenchmark(fit_enorm_mst(db),tmtCML::raschmodel(data[,-51]))
}
ajshd
lakjsd
asjdlkajsd
laskjd
alskjd
library(sirt)
?sirt
library(CDM)#
data(data.read)#
dat <- data.read#
I <- ncol(dat) # number of items#
#
# Rasch model#
mod1 <- sirt::rasch.mml2( dat )#
summary(mod1)
summary(mod1)#
plot( mod1 )    # plot all items#
# title 'Rasch model', display curves from -3 to 3 only for items 1, 5 and 8#
plot(mod1, main="Rasch model Items 1, 5 and 8", xlim=c(-3,3), items=c(1,5,8) )
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(reload = TRUE)
Rcpp::evalCpp("1+1")
parlist <- list(log(c(0.5,0.5)),log(c(0.5,0.5)),log(c(0.5,0.5)))#
ojlist = list(c(1,1),c(1,1),c(1,1))#
minSolved = c(0,0,0)#
maxSolved = c(2,2,2)
parlist <- list(log(c(1,0.5)),log(c(0.5,1)),log(c(0.5,1/3)))
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")[[3]]
esf_mst_vector_v2_agrad_2o(parlist, ojlist = ojlist, minSolved = minSolved, maxSolved = maxSolved, order = 2)[[3]]
parlist <- list(log(c(0.5,0.5)),log(c(0.5,0.5)),log(c(0.5,0.5)))
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")[[3]]
parlist <- list(log(c(1,0.5)),log(c(0.5,1)),log(c(0.5,1/3)))
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")
parlist <- list(log(c(1,0.5)),log(c(0.5,1)),log(c(0.5,1/3)))
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")
parlist <- list(log(c(1,0.5)),log(c(0.5,1)),log(c(0.5,1/3)))
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")
parlist <- list(log(c(1,0.5,1/3,1)),log(c(0.5,1)),log(c(0.5,1,1/3)))
ojlist = list(c(1,1,1,1),c(1,1),c(1,1,1))
minSolved = c(0,0,0)
maxSolved = c(4,2,3)
esf_mst_vector_v2_agrad_2o(parlist, ojlist = ojlist, minSolved = minSolved, maxSolved = maxSolved, order = 2)
1%%4
1:4%%4
1:4%%3
1:4%%5
1:4%%5-1
5:6%%3-1
5:6%%3
5:6%%2
5:6%%3
5:6%%1
5:6%%2
7:9%%3
7:9%%4
7:9%%3
6:8%%3
0:3%%3
0:3%%4
parlist <- list(log(c(1,0.5,1/3,1)),log(c(0.5,1)),log(c(0.5,1,1/3)))#
ojlist = list(c(1,1,1,1),c(1,1),c(1,1,1))#
minSolved = c(0,0,0)#
maxSolved = c(4,2,3)
psychotools::elementary_symmetric_functions(unlist(parlist), order = 2, diff = "sum" == "diff")
setwd("/Users/jansteinfeld/CloudStation/GIT/tmt_dev")#
#
roxygen2::roxygenise()#
devtools::check()#
rmarkdown::render("README.rmd")#
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))#
devtools::build_vignettes()#
pkgdown::build_site()#
devtools::install('.', reload = TRUE, args = '--build --preclean', build_vignettes = TRUE)#
devtools::test()#
devtools::build_manual()#
#devtools::build(binary = TRUE, args = c('--preclean'))#
# CRAN Ckecks
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_test"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    DirEnd<-paste0(sinkpath,FileOrDir)#
    system(paste("cp -r",DirSource,DirEnd))#
    return(file.exists(paste(MySinkDir, FileOrDir,sep="")))#
}
CopyDirOrFile("doc")
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_test/"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    DirEnd<-paste0(sinkpath,FileOrDir)#
    system(paste("cp -r",DirSource,DirEnd))#
    return(file.exists(paste0(sinkpath, FileOrDir)))#
}
CopyDirOrFile("doc")
CopyDirOrFile("man")
CopyDirOrFile("DESCRIPTION")
setwd("/Users/jansteinfeld/CloudStation/GIT/tmt_dev")#
#
roxygen2::roxygenise()#
devtools::check()#
rmarkdown::render("README.rmd")#
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))#
devtools::install('.', reload = TRUE, args = '--build --preclean', build_vignettes = TRUE)#
devtools::build_vignettes()#
rmarkdown::render("README.rmd")#
pkgdown::build_site()#
devtools::test()#
devtools::build_manual()
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_public/"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    DirEnd<-paste0(sinkpath,FileOrDir)#
    system(paste("cp -r",DirSource,DirEnd))#
    return(file.exists(paste0(sinkpath, FileOrDir)))#
}
CopyDirOrFile("man")
CopyDirOrFile("pkgdown")
CopyDirOrFile("R")
CopyDirOrFile("doc")
CopyDirOrFile("Vignettes")
CopyDirOrFile("vignettes")
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_public/"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    DirEnd<-paste0(sinkpath,FileOrDir)#
    system(paste("cp -rf",DirSource,DirEnd))#
    return(file.exists(paste0(sinkpath, FileOrDir)))#
}
CopyDirOrFile("vignettes")
CopyDirOrFile("vignettes")
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_public/"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    DirEnd<-paste0(sinkpath,FileOrDir)#
    system(paste("cp -rf",DirSource,DirEnd))#
    return(file.exists(paste0(sinkpath, FileOrDir)))#
}
CopyDirOrFile("vignettes")
FileOrDir <- "vignettes"
sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_public/"
DirSource <- paste0(sourcepath,FileOrDir)
DirEnd<-paste0(sinkpath,FileOrDir)
DirSource
DirEnd
paste("cp -rf",DirSource,DirEnd)
CopyDirOrFile<-function(FileOrDir){#
    sourcepath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_dev/"#
    sinkpath <- "/Users/jansteinfeld/CloudStation/GIT/tmt_public/"#
    DirSource <- paste0(sourcepath,FileOrDir)#
    system(paste("cp -rf",DirSource,sinkpath))#
    return(file.exists(paste0(sinkpath, FileOrDir)))#
}
CopyDirOrFile("vignettes")
CopyDirOrFile("doc")#
# copy_folder_to_public("docs") # sollte von der Vignette und pkgdown befüllt werden#
CopyDirOrFile("man")#
CopyDirOrFile("Meta")#
CopyDirOrFile("pkgdown")#
CopyDirOrFile("R")
CopyDirOrFile("src")#
CopyDirOrFile("tests")#
CopyDirOrFile("inst")#
CopyDirOrFile("vignettes")#
CopyDirOrFile(".travis.yml")#
CopyDirOrFile("DESCRIPTION")
CopyDirOrFile("NAMESPACE")
setwd("/Users/jansteinfeld/CloudStation/GIT/tmt_public")
rmarkdown::render("README.rmd")
pkgdown::build_site()
